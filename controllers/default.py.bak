# -*- coding: utf-8 -*-
# -------------------------------------------------------------------------
# This is a sample controller
# this file is released under public domain and you can use without limitations
# -------------------------------------------------------------------------

# ---- example index page ----
def index():
    if auth.is_logged_in():
        redirect(URL('../../video/review'))
    return dict(message=T('Welcome!'))

# ---- API (example) -----
@auth.requires_login()
def api_get_user_email():
    if not request.env.request_method == 'GET': raise HTTP(403)
    return response.json({'status':'success', 'email':auth.user.email})

# ---- Smart Grid (example) -----
@auth.requires_membership('admin') # can only be accessed by members of admin groupd
def grid():
    response.view = 'generic.html' # use a generic view
    tablename = request.args(0)
    if not tablename in db.tables: raise HTTP(403)
    grid = SQLFORM.smartgrid(db[tablename], args=[tablename], deletable=False, editable=False)
    return dict(grid=grid)

# ---- Embedded wiki (example) ----
def wiki():
    auth.wikimenu() # add the wiki to the menu
    return auth.wiki()

# ---- Action for login/register/etc (required for auth) -----
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())

# ---- action to server uploaded static content (required) ---
@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


#-------Gerir Videos--------
@auth.requires_login()
@auth.requires(lambda: auth.has_membership('produtor') or auth.has_membership('admin'))
def manage_videos():
    #grid = SQLFORM.grid(Videos.autor == auth.user_id)
    grid = SQLFORM.grid(Videos.autor == auth.user_id, links=[lambda row: A([SPAN(_class='icon magnifier icon-zoom-in glyphicon glyphicon-zoom-in'), ' Visualizações'], _class='button btn btn-default btn-secondary', _href=URL('visualizacoes',args=[row.id]))])
    return dict(grid=grid)


#-------Visualizações--------
@auth.requires_login()
@auth.requires(lambda: auth.has_membership('produtor') or auth.has_membership('admin'))
def visualizacoes():
    videos = db(Videos.id == request.args(0)).select()
    video = videos[0]
    
    visualizacoes = db(Visualizacao.video == request.args(0)).select()

    return dict(video=video, visualizacoes=visualizacoes)


def chart():
    dados_chart="[{name: 'Batata', y: 12},{name: 'Tomate', y: 8},{name: 'Mamão', y: 12}]" #Change this dynamically
    dados_map={}
    dados_map["dados"]=dados_chart
    chart=" 
    <script type='text/javascript'>
                Highcharts.setOptions({
                    lang:{
                    downloadJPEG: 'Download em imagem JPG',
                    downloadPDF: 'Download em documento PDF',
                    downloadPNG: 'Download em imagem PNG',
                    downloadSVG: 'Download em vetor SVG',
                    loading: 'Lendo...',
                    noData: 'Sem dados para mostrar',
                    printChart: 'Imprimir Gráfico',
                    }
                    });

                    // Build the chart
                    $('#chart').highcharts({
                        chart: {
                            plotBackgroundColor: null,
                            plotBorderWidth: null,
                            plotShadow: false,
                            type: 'pie'
                        },
                        title: {
                            text: 'Meu Gráfico'
                },
                    tooltip: {
                        pointFormat: '{series.name}: <b>{point.percentage:.1f}%%</b>'
                    },
                    plotOptions: {
                        pie: {
                            allowPointSelect: true,
                            cursor: 'pointer',
                            dataLabels: {
                                enabled: false
                            },
                            showInLegend: true
                        }
                    },
                    credits:{enabled:false},
                    series: [{
                        name: 'Vendar por porcentagem',
                        colorByPoint: true,
                            data: %(dados)s
                            }]
                        });
                </script> " %dados_map
    return dict(chart=XML(chart))
